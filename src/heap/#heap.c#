#include "heap.h"
#include <stdlib.h>
#include <stddef.h>
#include <stdint.h>
#include <string.h>
#include <stdio.h>

#define DEBUG
#define HEAP_SIZE_values 64

typedef struct {
	size_t size;
	size_t n;
	int *values;
} heap_t;

/* heap internals */
heap_t * heap_init() {
	heap_t * heap 	= (heap_t*)malloc(sizeof(heap_t));
	heap->values 	= (int*)calloc(sizeof(int), HEAP_SIZE_values);
	heap->size 	= HEAP_SIZE_values;
	heap->n		= 0;
	return heap;
}

heap_t * nheap_init(size_t size)
{
	if(size <= 0)
	{
		printf("HEAP ERROR: Please provide a valid value for heap size (must be > 0)\n");
#ifdef ENABLE_EXIT_ON_HEAP_ERROR
		printf("HEAP ERROR: exiting with code -1\n");
		exit(-1);
#endif
		return 0;
	}
	heap_t * heap	= (heap_t*)malloc(sizeof(heap_t));
	heap->values 	= (int*)calloc(sizeof(int), size);
	heap->size	= size;
	heap->n		= 0;
	return heap;
}

void check_null_and_exit(void* ptr, char* msg)
{
	if(ptr == NULL)
	{
		printf("check_null_and_exit() found a null value...\n");
		printf("-> %s\n", msg);
		exit(-1);
	}
}

/* Resize the current heap values array, adding half the current size */
heap_t *resize(heap_t *ptr)
{
	ptr->values = realloc(ptr->values, sizeof(int)*(ptr->size + ptr->size/2));
	check_null_and_exit(ptr->values, "resize() heap error");
	return ptr;
}

/*
	add a % of the current size to the current capacity of heap items array.
	for example: if percentage = 50, then the final size value will be the current
	size + half the size (size + size/2).
*/
heap_t *nresize(heap_t *ptr, int percentage)
{
	ptr->values = realloc(ptr->values, sizeof(int)*(ptr->size + ptr->size*(percentage/100)));
	check_null_and_exit(ptr->values, "nresize() heap error");
	return ptr;
}

/* heapfree */

void heapfree(heap_t *ptr)
{
	if(ptr != NULL){
		if(ptr->values != NULL) free(ptr->values);
		free(ptr);
	}
}

#ifdef HEAP_SIZE_values
heap_t * new_heap()
{
	return heap_init();
}
#endif
#ifndef HEAP_SIZE_values
heap_t *new_heap(size_t size)
{
	return nheap_init(size);
}
#endif


int main()
{
  
}
